version: '3'
services:

  database:
    image: postgres:13
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-database
    command:
      [
        "postgres",
        "-c",
        "log_statement=all",
        "-c",
        "log_destination=stderr"
      ]
    ports:
      - "${DB_PORT}:5432"
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      TZ: ${TIMEZONE}
      PGTZ: ${TIMEZONE}
    volumes:
      - ~/.volumes/database/postgresql:/var/lib/postgresql/data
    networks:
      - spring-boot-example-network
    tty: true

  api:
    build:
      context: ../api
      dockerfile: ../api/docker/Dockerfile.dev
    image: throyer/springboot/example-api-development:latest
    platform: linux/x86_64
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-api
    links:
      - database
    ports:
      - "${API_PORT}:${API_PORT}"
      - "${API_DEBUG_PORT}:${API_DEBUG_PORT}"
    environment:

      # database
      DB_PORT: ${DB_PORT}
      DB_NAME: ${DB_NAME}
      DB_HOST: ${DB_HOST}
      DB_USERNAME: ${DB_USERNAME}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_SHOW_SQL: ${DB_SHOW_SQL}
      DB_MAX_CONNECTIONS: ${DB_MAX_CONNECTIONS}

      # security
      TOKEN_SECRET: ${TOKEN_SECRET}
      HASHIDS_SECRET: ${HASHIDS_SECRET}
      COOKIE_SECRET: ${COOKIE_SECRET}
      TOKEN_EXPIRATION_IN_HOURS: ${TOKEN_EXPIRATION_IN_HOURS}
      REFRESH_TOKEN_EXPIRATION_IN_DAYS: ${REFRESH_TOKEN_EXPIRATION_IN_DAYS}
      MINUTES_TO_EXPIRE_RECOVERY_CODE: ${MINUTES_TO_EXPIRE_RECOVERY_CODE}
      MAX_REQUESTS_PER_MINUTE: ${MAX_REQUESTS_PER_MINUTE}

      # smtp
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USERNAME: ${SMTP_USERNAME}
      SMTP_PASSWORD: ${SMTP_PASSWORD}

      # swagger
      SWAGGER_URL: ${SWAGGER_URL}
      SWAGGER_USERNAME: ${SWAGGER_USERNAME}
      SWAGGER_PASSWORD: ${SWAGGER_PASSWORD}
    volumes:
      - ../api:/app
      - ~/.m2:/root/.m2
    working_dir: /app
    networks:
      - spring-boot-example-network
    tty: true
    entrypoint: [
      "dockerize",
      "-wait",
      "tcp://database:${DB_PORT}",
      "-timeout",
      "20s",
      'mvn',
      'spring-boot:run',
      '-Dspring-boot.run.jvmArguments="-agentlib:jdwp=transport=dt_socket,server=y,address=*:${API_DEBUG_PORT},suspend=n"'
    ]

  web:
    image: throyer/springboot/example-web-development:latest
    build:
      context: ../web
      dockerfile: ../web/docker/Dockerfile.dev
    restart: unless-stopped
    container_name: ${COMPOSE_PROJECT_NAME}-web
    links:
      - api
    ports:
      - "${APP_PORT}:${APP_PORT}"
    volumes:
      - ../web:/app
    working_dir: /app
    networks:
      - spring-boot-example-network
    tty: true
    environment:
      APP_PORT: ${APP_PORT}
      VITE_API_BASE_URL: ${APP_API_BASE_URL}
    entrypoint: [
      "dockerize",
      "-wait",
      "http://api:${API_PORT}/api",
      "-timeout",
      "20s",
      "npm",
      "run",
      "dev"
    ]

networks:
  spring-boot-example-network:
    driver: bridge
